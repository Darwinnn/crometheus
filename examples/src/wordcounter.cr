require "crometheus/collector"
require "crometheus/counter"
require "crometheus/gauge"
require "crometheus/histogram"
include Crometheus

# Helper method for creating bucket arrays; simply generates
# [4.0, 5.0, 6.0, 7.0, 8.0, 9.0, +Inf]
bucket_array = Histogram.linear_buckets(4, 1, 7)

# All metrics belong to, and are generated by, an instance of the generic
# Collector type.
word_length = Collector(Histogram).new(
  name: :wordcounter_word_length,
  docstring: "How many words have been typed",
  buckets: bucket_array
)
lines = Collector(Counter).new(:wordcounter_lines, "The number of lines entered")
start_time = Collector(Gauge).new(:wordcounter_start_time, "Startup timestamp")
last_usage = Collector(Gauge).new(:wordcounter_last_usage, "Timestamp of latest gets()")

start_time.set_to_current_time

# By default, all metrics are added to a default registry, accessible like this.
reg = Crometheus.default_registry
# Fire up the HTTP server in the background.
reg.start_server

puts "Type a line of text, then visit http://#{reg.host}:#{reg.port}."
puts "Press Ctrl+D to quit."
while true
  line = gets
  if line.nil?
    break
  end
  lines.inc
  last_usage.set_to_current_time
  line.scan(/\b\S+\b/) do |match|
    word = match[0]
    length = word.chars.count &.alphanumeric?
    word_length.observe(length)
    word_length[type: "palindrome"].observe(length) if word == word.reverse
    word_length[type: "allcaps"].observe(length) if word == word.upcase
    word_length[type: "punctuated"].observe(length) unless word.chars.all? &.alphanumeric?
  end
end
